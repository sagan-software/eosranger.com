// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Redis = require("redis");
var Bluebird = require("bluebird");
var Eos_Types = require("@sagan-software/bs-eos/src/Eos_Types.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

function make() {
  var client = Redis.createClient();
  Bluebird.promisifyAll(client);
  return client;
}

var Redis$1 = /* module */[/* make */make];

function count(client, chainId) {
  return client.scardAsync(Eos_Types.ChainId[/* toString */4](chainId));
}

function push(client, chainId, blockNums) {
  var key = Eos_Types.ChainId[/* toString */4](chainId);
  var values = Belt_Array.map(blockNums, (function (bn) {
          return String(Eos_Types.BlockNum[/* toInt */4](bn));
        }));
  return client.saddAsync(key, values);
}

function pop(client, chainId) {
  return client.spopAsync(Eos_Types.ChainId[/* toString */4](chainId)).then((function (blockNum) {
                return Promise.resolve(Belt_Option.map((blockNum == null) ? undefined : Js_primitive.some(blockNum), (function (str) {
                                  return Eos_Types.BlockNum[/* fromInt */3](Caml_format.caml_int_of_string(str));
                                })));
              }));
}

function chainIds(_, _$1) {
  return Promise.resolve(/* array */[]);
}

function Make() {
  var client = make(/* () */0);
  var count$1 = function (param) {
    return count(client, param);
  };
  var push$1 = function (param, param$1) {
    return push(client, param, param$1);
  };
  var pop$1 = function (param) {
    return pop(client, param);
  };
  var chainIds = function () {
    return Promise.resolve(/* array */[]);
  };
  return /* module */[
          /* count */count$1,
          /* push */push$1,
          /* pop */pop$1,
          /* chainIds */chainIds
        ];
}

exports.Redis = Redis$1;
exports.count = count;
exports.push = push;
exports.pop = pop;
exports.chainIds = chainIds;
exports.Make = Make;
/* redis Not a pure module */
