// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Url = require("url");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Eosr_Env = require("./Eosr_Env.js");
var Eos_Chain = require("@sagan-software/bs-eos/src/Eos_Chain.js");
var Eos_Types = require("@sagan-software/bs-eos/src/Eos_Types.js");
var Eosr_Util = require("./Eosr_Util.js");
var Js_option = require("bs-platform/lib/js/js_option.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var RequestPromise = require("request-promise");

function header(t, key) {
  return Js_primitive.undefined_to_opt(t.headers[key]);
}

var Options = /* module */[];

var TimedOut = Caml_exceptions.create("Eosr_Node.Request.TimedOut");

var UnknownError = Caml_exceptions.create("Eosr_Node.Request.UnknownError");

var $$Error = /* module */[];

function make(url, $staropt$star, $staropt$star$1, body, $staropt$star$2, headers, $staropt$star$3, simple, time, _) {
  var method__ = $staropt$star !== undefined ? $staropt$star : "GET";
  var json = $staropt$star$1 !== undefined ? $staropt$star$1 : false;
  var timeout = $staropt$star$2 !== undefined ? $staropt$star$2 : 0;
  var encoding = $staropt$star$3 !== undefined ? Js_primitive.valFromOption($staropt$star$3) : undefined;
  var tmp = {
    url: url,
    method: method__,
    json: json,
    resolveWithFullResponse: true,
    timeout: timeout,
    headers: Js_dict.fromArray(Js_option.getWithDefault(/* array */[], headers)),
    encoding: encoding
  };
  if (body) {
    tmp.body = Js_primitive.valFromOption(body);
  }
  if (simple) {
    tmp.simple = Js_primitive.valFromOption(simple);
  }
  if (time) {
    tmp.time = Js_primitive.valFromOption(time);
  }
  return RequestPromise(tmp).catch((function (e) {
                var match = e.error.code;
                var tmp = match === "ETIMEDOUT" ? [
                    TimedOut,
                    url
                  ] : [
                    UnknownError,
                    e
                  ];
                return Promise.reject(tmp);
              }));
}

var TimingPhases = /* module */[];

var Timings = /* module */[];

var Request = /* module */[
  /* header */header,
  /* Options */Options,
  /* TimedOut */TimedOut,
  /* UnknownError */UnknownError,
  /* Error */$$Error,
  /* make */make,
  /* TimingPhases */TimingPhases,
  /* Timings */Timings
];

function make$1(endpoint) {
  return /* record */[
          /* endpoint */endpoint,
          /* info */undefined,
          /* errorTimes : array */[],
          /* responseTimes : array */[],
          /* numErrors */0,
          /* numSuccess */0,
          /* numBlocks */0
        ];
}

function key(t) {
  return Url.parse(t[/* endpoint */0]).hostname;
}

var empty_002 = /* errorTimes : array */[];

var empty_003 = /* responseTimes : array */[];

var empty = /* record */[
  /* endpoint */"",
  /* info */undefined,
  empty_002,
  empty_003,
  /* numErrors */0,
  /* numSuccess */0,
  /* numBlocks */0
];

function pruneErrorTimes(t) {
  var now = Date.now();
  var cutoff = now - 10 * 60 * 1000;
  return /* record */[
          /* endpoint */t[/* endpoint */0],
          /* info */t[/* info */1],
          /* errorTimes */t[/* errorTimes */2].filter((function (e) {
                  return e > cutoff;
                })),
          /* responseTimes */t[/* responseTimes */3],
          /* numErrors */t[/* numErrors */4],
          /* numSuccess */t[/* numSuccess */5],
          /* numBlocks */t[/* numBlocks */6]
        ];
}

function addErrorTime(t) {
  t[/* errorTimes */2].push(Date.now());
  return pruneErrorTimes(t);
}

function addError(t) {
  return addErrorTime(/* record */[
              /* endpoint */t[/* endpoint */0],
              /* info */t[/* info */1],
              /* errorTimes */t[/* errorTimes */2],
              /* responseTimes */t[/* responseTimes */3],
              /* numErrors */t[/* numErrors */4] + 1 | 0,
              /* numSuccess */t[/* numSuccess */5],
              /* numBlocks */t[/* numBlocks */6]
            ]);
}

function addSuccess(t) {
  return /* record */[
          /* endpoint */t[/* endpoint */0],
          /* info */t[/* info */1],
          /* errorTimes */t[/* errorTimes */2],
          /* responseTimes */t[/* responseTimes */3],
          /* numErrors */t[/* numErrors */4],
          /* numSuccess */t[/* numSuccess */5] + 1 | 0,
          /* numBlocks */t[/* numBlocks */6]
        ];
}

function pruneResponseTimes(t) {
  return /* record */[
          /* endpoint */t[/* endpoint */0],
          /* info */t[/* info */1],
          /* errorTimes */t[/* errorTimes */2],
          /* responseTimes */Belt_Array.slice(t[/* responseTimes */3], -30, 30),
          /* numErrors */t[/* numErrors */4],
          /* numSuccess */t[/* numSuccess */5],
          /* numBlocks */t[/* numBlocks */6]
        ];
}

function addResponseTime(t, r) {
  var responseTime = Belt_Option.getWithDefault(Belt_Option.map(Js_primitive.nullable_to_opt(r.timings), (function (prim) {
              return prim.end;
            })), Eosr_Env.throttleTime);
  t[/* responseTimes */3].push(responseTime);
  return pruneResponseTimes(t);
}

function avgResponseTime(t) {
  var total = Belt_Array.reduce(t[/* responseTimes */3], 0, (function (a, b) {
          return a + b;
        }));
  var count = Caml_primitive.caml_int_max(t[/* responseTimes */3].length, 1);
  return total / count;
}

function getThrottleTime(t) {
  var responseTime = avgResponseTime(t);
  var errorCount = Caml_primitive.caml_int_max(t[/* errorTimes */2].length, 1);
  var errorMultiplier = Math.pow(2, errorCount);
  return responseTime * 1.5 * errorMultiplier;
}

function getInfo(t) {
  return make(new Url.URL("/v1/chain/get_info", t[/* endpoint */0]).toString(), undefined, undefined, undefined, 5000, undefined, undefined, undefined, undefined, /* () */0).then((function (res) {
                  var body = res.body;
                  var info = Eosr_Util.decodeText(Eos_Chain.Info[/* decode */0], body);
                  var t$1 = info !== undefined ? addSuccess(/* record */[
                          /* endpoint */t[/* endpoint */0],
                          /* info */info,
                          /* errorTimes */t[/* errorTimes */2],
                          /* responseTimes */t[/* responseTimes */3],
                          /* numErrors */t[/* numErrors */4],
                          /* numSuccess */t[/* numSuccess */5],
                          /* numBlocks */t[/* numBlocks */6]
                        ]) : addError(t);
                  return Promise.resolve(addResponseTime(t$1, res));
                })).catch((function () {
                return Promise.resolve(addError(t));
              }));
}

function getBlock(t, blockNum) {
  return make(new Url.URL("/v1/chain/get_block", t[/* endpoint */0]).toString(), "POST", undefined, Json.stringify(Json_encode.object_(/* :: */[
                          /* tuple */[
                            "block_num_or_id",
                            Eos_Types.BlockNum[/* encode */1](blockNum)
                          ],
                          /* [] */0
                        ])), 5000, undefined, undefined, undefined, undefined, /* () */0).then((function (res) {
                  var body = res.body;
                  var block = Json.parse(body);
                  var t$1 = block !== undefined ? addSuccess(t) : addError(t);
                  return Promise.resolve(/* tuple */[
                              addResponseTime(t$1, res),
                              block
                            ]);
                })).catch((function () {
                return Promise.resolve(/* tuple */[
                            addError(t),
                            undefined
                          ]);
              }));
}

exports.Request = Request;
exports.make = make$1;
exports.key = key;
exports.empty = empty;
exports.pruneErrorTimes = pruneErrorTimes;
exports.addErrorTime = addErrorTime;
exports.addError = addError;
exports.addSuccess = addSuccess;
exports.pruneResponseTimes = pruneResponseTimes;
exports.addResponseTime = addResponseTime;
exports.avgResponseTime = avgResponseTime;
exports.getThrottleTime = getThrottleTime;
exports.getInfo = getInfo;
exports.getBlock = getBlock;
/* url Not a pure module */
